cloudwatch:
  duration: 180
  warmup: 180
  delay: 60
  metrics:
  - Id: cPUUtilization
    Label: "CPUUtilization"
    MetricStat:
      Metric:
        MetricName: CPUUtilization
        Namespace: AWS/ECS
        Dimensions:
        - Name: ClusterName
          Value: default
        - Name: ServiceName
          Value: co-http
      Period: 60
      Stat: Average
      Unit: Percent
  - Id: memoryUtilization
    Label: "MemoryUtilization"
    MetricStat:
      Metric:
        MetricName: MemoryUtilization
        Namespace: AWS/ECS
        Dimensions:
        - Name: ClusterName
          Value: default
        - Name: ServiceName
          Value: co-http
      Period: 60
      Stat: Average
      Unit: Percent
  - Id: targetResponseTime
    Label: "TargetResponseTime"
    MetricStat:
      Metric:
        MetricName: TargetResponseTime
        Namespace: AWS/ApplicationELB
        Dimensions:
        - Name: LoadBalancer
          Value: app/co-http-lb/525f3243de89e27f
      Period: 60
      Stat: Average
      Unit: Seconds
fargate: # NOTE: assumes OPTUNE_ECS_USE_RANGES is set to true
  co-http:
    # cluster: default # Optional ECS cluster, assumes default cluster if no value is provided
    service_name: co-http # Required, identifies fargate deployment to be tuned
    timeout_service_desired_count: 600 # Max time to wait for updated service to reach desired number of instances
    settings: # Used to update fargate task definition
      cpu:
        min: 0.25
        max: 1
      mem:
        min: 0.5
        max: 2
      replicas:
        max: 20
    environment:
      GOGC: # example var, co-http runs a Go webserver and this tunes its garbage collector
        type: 'range'
        min: 50
        max: 300
        step: 10
        default: 100
      TEST:
        type: 'enum'
        unit: 'none'
        default: 'A'
        values:
        - 'A'
        - 'B'
        - 'C'
